// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: malou.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MalouServer_Heartbeat_FullMethodName         = "/MalouServer/Heartbeat"
	MalouServer_PullPipeline_FullMethodName      = "/MalouServer/PullPipeline"
	MalouServer_ReportPipelineLog_FullMethodName = "/MalouServer/ReportPipelineLog"
)

// MalouServerClient is the client API for MalouServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalouServerClient interface {
	// 心跳请
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error)
	// 拉取流水线任务
	PullPipeline(ctx context.Context, in *PullPipelineReq, opts ...grpc.CallOption) (*PullPipelineResp, error)
	// 回显执行结果
	ReportPipelineLog(ctx context.Context, opts ...grpc.CallOption) (MalouServer_ReportPipelineLogClient, error)
}

type malouServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMalouServerClient(cc grpc.ClientConnInterface) MalouServerClient {
	return &malouServerClient{cc}
}

func (c *malouServerClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, MalouServer_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouServerClient) PullPipeline(ctx context.Context, in *PullPipelineReq, opts ...grpc.CallOption) (*PullPipelineResp, error) {
	out := new(PullPipelineResp)
	err := c.cc.Invoke(ctx, MalouServer_PullPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouServerClient) ReportPipelineLog(ctx context.Context, opts ...grpc.CallOption) (MalouServer_ReportPipelineLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &MalouServer_ServiceDesc.Streams[0], MalouServer_ReportPipelineLog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &malouServerReportPipelineLogClient{stream}
	return x, nil
}

type MalouServer_ReportPipelineLogClient interface {
	Send(*ReportPipelineLogReq) error
	CloseAndRecv() (*ReportPipelineLogResp, error)
	grpc.ClientStream
}

type malouServerReportPipelineLogClient struct {
	grpc.ClientStream
}

func (x *malouServerReportPipelineLogClient) Send(m *ReportPipelineLogReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *malouServerReportPipelineLogClient) CloseAndRecv() (*ReportPipelineLogResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportPipelineLogResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MalouServerServer is the server API for MalouServer service.
// All implementations must embed UnimplementedMalouServerServer
// for forward compatibility
type MalouServerServer interface {
	// 心跳请
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)
	// 拉取流水线任务
	PullPipeline(context.Context, *PullPipelineReq) (*PullPipelineResp, error)
	// 回显执行结果
	ReportPipelineLog(MalouServer_ReportPipelineLogServer) error
	mustEmbedUnimplementedMalouServerServer()
}

// UnimplementedMalouServerServer must be embedded to have forward compatible implementations.
type UnimplementedMalouServerServer struct {
}

func (UnimplementedMalouServerServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMalouServerServer) PullPipeline(context.Context, *PullPipelineReq) (*PullPipelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullPipeline not implemented")
}
func (UnimplementedMalouServerServer) ReportPipelineLog(MalouServer_ReportPipelineLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportPipelineLog not implemented")
}
func (UnimplementedMalouServerServer) mustEmbedUnimplementedMalouServerServer() {}

// UnsafeMalouServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalouServerServer will
// result in compilation errors.
type UnsafeMalouServerServer interface {
	mustEmbedUnimplementedMalouServerServer()
}

func RegisterMalouServerServer(s grpc.ServiceRegistrar, srv MalouServerServer) {
	s.RegisterService(&MalouServer_ServiceDesc, srv)
}

func _MalouServer_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouServer_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouServerServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouServer_PullPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullPipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouServerServer).PullPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouServer_PullPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouServerServer).PullPipeline(ctx, req.(*PullPipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouServer_ReportPipelineLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MalouServerServer).ReportPipelineLog(&malouServerReportPipelineLogServer{stream})
}

type MalouServer_ReportPipelineLogServer interface {
	SendAndClose(*ReportPipelineLogResp) error
	Recv() (*ReportPipelineLogReq, error)
	grpc.ServerStream
}

type malouServerReportPipelineLogServer struct {
	grpc.ServerStream
}

func (x *malouServerReportPipelineLogServer) SendAndClose(m *ReportPipelineLogResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *malouServerReportPipelineLogServer) Recv() (*ReportPipelineLogReq, error) {
	m := new(ReportPipelineLogReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MalouServer_ServiceDesc is the grpc.ServiceDesc for MalouServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MalouServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MalouServer",
	HandlerType: (*MalouServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _MalouServer_Heartbeat_Handler,
		},
		{
			MethodName: "PullPipeline",
			Handler:    _MalouServer_PullPipeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportPipelineLog",
			Handler:       _MalouServer_ReportPipelineLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "malou.proto",
}
