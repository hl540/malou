// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: v1/malou.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Malou_RegisterRunner_FullMethodName    = "/Malou/RegisterRunner"
	Malou_Heartbeat_FullMethodName         = "/Malou/Heartbeat"
	Malou_PullPipeline_FullMethodName      = "/Malou/PullPipeline"
	Malou_ReportPipelineLog_FullMethodName = "/Malou/ReportPipelineLog"
)

// MalouClient is the client API for Malou service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalouClient interface {
	// 心跳请
	RegisterRunner(ctx context.Context, in *RegisterRunnerReq, opts ...grpc.CallOption) (*RegisterRunnerResp, error)
	// 心跳请
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error)
	// 拉取流水线任务
	PullPipeline(ctx context.Context, in *PullPipelineReq, opts ...grpc.CallOption) (*PullPipelineResp, error)
	// 回显执行结果
	ReportPipelineLog(ctx context.Context, opts ...grpc.CallOption) (Malou_ReportPipelineLogClient, error)
}

type malouClient struct {
	cc grpc.ClientConnInterface
}

func NewMalouClient(cc grpc.ClientConnInterface) MalouClient {
	return &malouClient{cc}
}

func (c *malouClient) RegisterRunner(ctx context.Context, in *RegisterRunnerReq, opts ...grpc.CallOption) (*RegisterRunnerResp, error) {
	out := new(RegisterRunnerResp)
	err := c.cc.Invoke(ctx, Malou_RegisterRunner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatResp, error) {
	out := new(HeartbeatResp)
	err := c.cc.Invoke(ctx, Malou_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouClient) PullPipeline(ctx context.Context, in *PullPipelineReq, opts ...grpc.CallOption) (*PullPipelineResp, error) {
	out := new(PullPipelineResp)
	err := c.cc.Invoke(ctx, Malou_PullPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouClient) ReportPipelineLog(ctx context.Context, opts ...grpc.CallOption) (Malou_ReportPipelineLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Malou_ServiceDesc.Streams[0], Malou_ReportPipelineLog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &malouReportPipelineLogClient{stream}
	return x, nil
}

type Malou_ReportPipelineLogClient interface {
	Send(*PipelineLog) error
	CloseAndRecv() (*ReportPipelineLogResp, error)
	grpc.ClientStream
}

type malouReportPipelineLogClient struct {
	grpc.ClientStream
}

func (x *malouReportPipelineLogClient) Send(m *PipelineLog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *malouReportPipelineLogClient) CloseAndRecv() (*ReportPipelineLogResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportPipelineLogResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MalouServer is the server API for Malou service.
// All implementations must embed UnimplementedMalouServer
// for forward compatibility
type MalouServer interface {
	// 心跳请
	RegisterRunner(context.Context, *RegisterRunnerReq) (*RegisterRunnerResp, error)
	// 心跳请
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error)
	// 拉取流水线任务
	PullPipeline(context.Context, *PullPipelineReq) (*PullPipelineResp, error)
	// 回显执行结果
	ReportPipelineLog(Malou_ReportPipelineLogServer) error
	mustEmbedUnimplementedMalouServer()
}

// UnimplementedMalouServer must be embedded to have forward compatible implementations.
type UnimplementedMalouServer struct {
}

func (UnimplementedMalouServer) RegisterRunner(context.Context, *RegisterRunnerReq) (*RegisterRunnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRunner not implemented")
}
func (UnimplementedMalouServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMalouServer) PullPipeline(context.Context, *PullPipelineReq) (*PullPipelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullPipeline not implemented")
}
func (UnimplementedMalouServer) ReportPipelineLog(Malou_ReportPipelineLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportPipelineLog not implemented")
}
func (UnimplementedMalouServer) mustEmbedUnimplementedMalouServer() {}

// UnsafeMalouServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalouServer will
// result in compilation errors.
type UnsafeMalouServer interface {
	mustEmbedUnimplementedMalouServer()
}

func RegisterMalouServer(s grpc.ServiceRegistrar, srv MalouServer) {
	s.RegisterService(&Malou_ServiceDesc, srv)
}

func _Malou_RegisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRunnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouServer).RegisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Malou_RegisterRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouServer).RegisterRunner(ctx, req.(*RegisterRunnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Malou_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Malou_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Malou_PullPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullPipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouServer).PullPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Malou_PullPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouServer).PullPipeline(ctx, req.(*PullPipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Malou_ReportPipelineLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MalouServer).ReportPipelineLog(&malouReportPipelineLogServer{stream})
}

type Malou_ReportPipelineLogServer interface {
	SendAndClose(*ReportPipelineLogResp) error
	Recv() (*PipelineLog, error)
	grpc.ServerStream
}

type malouReportPipelineLogServer struct {
	grpc.ServerStream
}

func (x *malouReportPipelineLogServer) SendAndClose(m *ReportPipelineLogResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *malouReportPipelineLogServer) Recv() (*PipelineLog, error) {
	m := new(PipelineLog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Malou_ServiceDesc is the grpc.ServiceDesc for Malou service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Malou_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Malou",
	HandlerType: (*MalouServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRunner",
			Handler:    _Malou_RegisterRunner_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Malou_Heartbeat_Handler,
		},
		{
			MethodName: "PullPipeline",
			Handler:    _Malou_PullPipeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportPipelineLog",
			Handler:       _Malou_ReportPipelineLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/malou.proto",
}
