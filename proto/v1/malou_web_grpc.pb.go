// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: v1/malou_web.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MalouWeb_CreateRunner_FullMethodName    = "/MalouWeb/CreateRunner"
	MalouWeb_RunnerInfo_FullMethodName      = "/MalouWeb/RunnerInfo"
	MalouWeb_RunnerList_FullMethodName      = "/MalouWeb/RunnerList"
	MalouWeb_PipelineLogList_FullMethodName = "/MalouWeb/PipelineLogList"
)

// MalouWebClient is the client API for MalouWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalouWebClient interface {
	CreateRunner(ctx context.Context, in *CreateRunnerReq, opts ...grpc.CallOption) (*CreateRunnerResp, error)
	RunnerInfo(ctx context.Context, in *RunnerInfoReq, opts ...grpc.CallOption) (*RunnerInfoResp, error)
	RunnerList(ctx context.Context, in *RunnerListReq, opts ...grpc.CallOption) (*RunnerListResp, error)
	PipelineLogList(ctx context.Context, in *PipelineLogListReq, opts ...grpc.CallOption) (*PipelineLogListResp, error)
}

type malouWebClient struct {
	cc grpc.ClientConnInterface
}

func NewMalouWebClient(cc grpc.ClientConnInterface) MalouWebClient {
	return &malouWebClient{cc}
}

func (c *malouWebClient) CreateRunner(ctx context.Context, in *CreateRunnerReq, opts ...grpc.CallOption) (*CreateRunnerResp, error) {
	out := new(CreateRunnerResp)
	err := c.cc.Invoke(ctx, MalouWeb_CreateRunner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) RunnerInfo(ctx context.Context, in *RunnerInfoReq, opts ...grpc.CallOption) (*RunnerInfoResp, error) {
	out := new(RunnerInfoResp)
	err := c.cc.Invoke(ctx, MalouWeb_RunnerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) RunnerList(ctx context.Context, in *RunnerListReq, opts ...grpc.CallOption) (*RunnerListResp, error) {
	out := new(RunnerListResp)
	err := c.cc.Invoke(ctx, MalouWeb_RunnerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) PipelineLogList(ctx context.Context, in *PipelineLogListReq, opts ...grpc.CallOption) (*PipelineLogListResp, error) {
	out := new(PipelineLogListResp)
	err := c.cc.Invoke(ctx, MalouWeb_PipelineLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MalouWebServer is the server API for MalouWeb service.
// All implementations must embed UnimplementedMalouWebServer
// for forward compatibility
type MalouWebServer interface {
	CreateRunner(context.Context, *CreateRunnerReq) (*CreateRunnerResp, error)
	RunnerInfo(context.Context, *RunnerInfoReq) (*RunnerInfoResp, error)
	RunnerList(context.Context, *RunnerListReq) (*RunnerListResp, error)
	PipelineLogList(context.Context, *PipelineLogListReq) (*PipelineLogListResp, error)
	mustEmbedUnimplementedMalouWebServer()
}

// UnimplementedMalouWebServer must be embedded to have forward compatible implementations.
type UnimplementedMalouWebServer struct {
}

func (UnimplementedMalouWebServer) CreateRunner(context.Context, *CreateRunnerReq) (*CreateRunnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedMalouWebServer) RunnerInfo(context.Context, *RunnerInfoReq) (*RunnerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerInfo not implemented")
}
func (UnimplementedMalouWebServer) RunnerList(context.Context, *RunnerListReq) (*RunnerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerList not implemented")
}
func (UnimplementedMalouWebServer) PipelineLogList(context.Context, *PipelineLogListReq) (*PipelineLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineLogList not implemented")
}
func (UnimplementedMalouWebServer) mustEmbedUnimplementedMalouWebServer() {}

// UnsafeMalouWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalouWebServer will
// result in compilation errors.
type UnsafeMalouWebServer interface {
	mustEmbedUnimplementedMalouWebServer()
}

func RegisterMalouWebServer(s grpc.ServiceRegistrar, srv MalouWebServer) {
	s.RegisterService(&MalouWeb_ServiceDesc, srv)
}

func _MalouWeb_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_CreateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).CreateRunner(ctx, req.(*CreateRunnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_RunnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).RunnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_RunnerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).RunnerInfo(ctx, req.(*RunnerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_RunnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).RunnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_RunnerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).RunnerList(ctx, req.(*RunnerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_PipelineLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).PipelineLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_PipelineLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).PipelineLogList(ctx, req.(*PipelineLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MalouWeb_ServiceDesc is the grpc.ServiceDesc for MalouWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MalouWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MalouWeb",
	HandlerType: (*MalouWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _MalouWeb_CreateRunner_Handler,
		},
		{
			MethodName: "RunnerInfo",
			Handler:    _MalouWeb_RunnerInfo_Handler,
		},
		{
			MethodName: "RunnerList",
			Handler:    _MalouWeb_RunnerList_Handler,
		},
		{
			MethodName: "PipelineLogList",
			Handler:    _MalouWeb_PipelineLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/malou_web.proto",
}
