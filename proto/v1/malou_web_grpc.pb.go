// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: v1/malou_web.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MalouWeb_CreateRunner_FullMethodName            = "/MalouWeb/CreateRunner"
	MalouWeb_UpdateRunner_FullMethodName            = "/MalouWeb/UpdateRunner"
	MalouWeb_RunnerInfo_FullMethodName              = "/MalouWeb/RunnerInfo"
	MalouWeb_RunnerList_FullMethodName              = "/MalouWeb/RunnerList"
	MalouWeb_CreatePipeline_FullMethodName          = "/MalouWeb/CreatePipeline"
	MalouWeb_UpdatePipeline_FullMethodName          = "/MalouWeb/UpdatePipeline"
	MalouWeb_PipelineInfo_FullMethodName            = "/MalouWeb/PipelineInfo"
	MalouWeb_PipelineList_FullMethodName            = "/MalouWeb/PipelineList"
	MalouWeb_PipelineInstanceLogList_FullMethodName = "/MalouWeb/PipelineInstanceLogList"
)

// MalouWebClient is the client API for MalouWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalouWebClient interface {
	// 创建runner
	CreateRunner(ctx context.Context, in *CreateRunnerReq, opts ...grpc.CallOption) (*CreateRunnerResp, error)
	// 更新runner
	UpdateRunner(ctx context.Context, in *UpdateRunnerReq, opts ...grpc.CallOption) (*UpdateRunnerResp, error)
	// 获取runner详情
	RunnerInfo(ctx context.Context, in *RunnerInfoReq, opts ...grpc.CallOption) (*RunnerInfoResp, error)
	// 获取runner列表
	RunnerList(ctx context.Context, in *RunnerListReq, opts ...grpc.CallOption) (*RunnerListResp, error)
	// 创建pipeline
	CreatePipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreatePipelineResp, error)
	// 更新pipeline
	UpdatePipeline(ctx context.Context, in *UpdatePipelineReq, opts ...grpc.CallOption) (*UpdatePipelineResp, error)
	// 获取pipeline详情
	PipelineInfo(ctx context.Context, in *PipelineInfoReq, opts ...grpc.CallOption) (*PipelineInfoResp, error)
	// 获取pipeline列表
	PipelineList(ctx context.Context, in *PipelineListReq, opts ...grpc.CallOption) (*PipelineListResp, error)
	// 拉取pipeline实例执行日志
	PipelineInstanceLogList(ctx context.Context, in *PipelineInstanceLogListReq, opts ...grpc.CallOption) (*PipelineInstanceLogListResp, error)
}

type malouWebClient struct {
	cc grpc.ClientConnInterface
}

func NewMalouWebClient(cc grpc.ClientConnInterface) MalouWebClient {
	return &malouWebClient{cc}
}

func (c *malouWebClient) CreateRunner(ctx context.Context, in *CreateRunnerReq, opts ...grpc.CallOption) (*CreateRunnerResp, error) {
	out := new(CreateRunnerResp)
	err := c.cc.Invoke(ctx, MalouWeb_CreateRunner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) UpdateRunner(ctx context.Context, in *UpdateRunnerReq, opts ...grpc.CallOption) (*UpdateRunnerResp, error) {
	out := new(UpdateRunnerResp)
	err := c.cc.Invoke(ctx, MalouWeb_UpdateRunner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) RunnerInfo(ctx context.Context, in *RunnerInfoReq, opts ...grpc.CallOption) (*RunnerInfoResp, error) {
	out := new(RunnerInfoResp)
	err := c.cc.Invoke(ctx, MalouWeb_RunnerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) RunnerList(ctx context.Context, in *RunnerListReq, opts ...grpc.CallOption) (*RunnerListResp, error) {
	out := new(RunnerListResp)
	err := c.cc.Invoke(ctx, MalouWeb_RunnerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) CreatePipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreatePipelineResp, error) {
	out := new(CreatePipelineResp)
	err := c.cc.Invoke(ctx, MalouWeb_CreatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) UpdatePipeline(ctx context.Context, in *UpdatePipelineReq, opts ...grpc.CallOption) (*UpdatePipelineResp, error) {
	out := new(UpdatePipelineResp)
	err := c.cc.Invoke(ctx, MalouWeb_UpdatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) PipelineInfo(ctx context.Context, in *PipelineInfoReq, opts ...grpc.CallOption) (*PipelineInfoResp, error) {
	out := new(PipelineInfoResp)
	err := c.cc.Invoke(ctx, MalouWeb_PipelineInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) PipelineList(ctx context.Context, in *PipelineListReq, opts ...grpc.CallOption) (*PipelineListResp, error) {
	out := new(PipelineListResp)
	err := c.cc.Invoke(ctx, MalouWeb_PipelineList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *malouWebClient) PipelineInstanceLogList(ctx context.Context, in *PipelineInstanceLogListReq, opts ...grpc.CallOption) (*PipelineInstanceLogListResp, error) {
	out := new(PipelineInstanceLogListResp)
	err := c.cc.Invoke(ctx, MalouWeb_PipelineInstanceLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MalouWebServer is the server API for MalouWeb service.
// All implementations must embed UnimplementedMalouWebServer
// for forward compatibility
type MalouWebServer interface {
	// 创建runner
	CreateRunner(context.Context, *CreateRunnerReq) (*CreateRunnerResp, error)
	// 更新runner
	UpdateRunner(context.Context, *UpdateRunnerReq) (*UpdateRunnerResp, error)
	// 获取runner详情
	RunnerInfo(context.Context, *RunnerInfoReq) (*RunnerInfoResp, error)
	// 获取runner列表
	RunnerList(context.Context, *RunnerListReq) (*RunnerListResp, error)
	// 创建pipeline
	CreatePipeline(context.Context, *CreatePipelineReq) (*CreatePipelineResp, error)
	// 更新pipeline
	UpdatePipeline(context.Context, *UpdatePipelineReq) (*UpdatePipelineResp, error)
	// 获取pipeline详情
	PipelineInfo(context.Context, *PipelineInfoReq) (*PipelineInfoResp, error)
	// 获取pipeline列表
	PipelineList(context.Context, *PipelineListReq) (*PipelineListResp, error)
	// 拉取pipeline实例执行日志
	PipelineInstanceLogList(context.Context, *PipelineInstanceLogListReq) (*PipelineInstanceLogListResp, error)
	mustEmbedUnimplementedMalouWebServer()
}

// UnimplementedMalouWebServer must be embedded to have forward compatible implementations.
type UnimplementedMalouWebServer struct {
}

func (UnimplementedMalouWebServer) CreateRunner(context.Context, *CreateRunnerReq) (*CreateRunnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedMalouWebServer) UpdateRunner(context.Context, *UpdateRunnerReq) (*UpdateRunnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunner not implemented")
}
func (UnimplementedMalouWebServer) RunnerInfo(context.Context, *RunnerInfoReq) (*RunnerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerInfo not implemented")
}
func (UnimplementedMalouWebServer) RunnerList(context.Context, *RunnerListReq) (*RunnerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerList not implemented")
}
func (UnimplementedMalouWebServer) CreatePipeline(context.Context, *CreatePipelineReq) (*CreatePipelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedMalouWebServer) UpdatePipeline(context.Context, *UpdatePipelineReq) (*UpdatePipelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (UnimplementedMalouWebServer) PipelineInfo(context.Context, *PipelineInfoReq) (*PipelineInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInfo not implemented")
}
func (UnimplementedMalouWebServer) PipelineList(context.Context, *PipelineListReq) (*PipelineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineList not implemented")
}
func (UnimplementedMalouWebServer) PipelineInstanceLogList(context.Context, *PipelineInstanceLogListReq) (*PipelineInstanceLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineInstanceLogList not implemented")
}
func (UnimplementedMalouWebServer) mustEmbedUnimplementedMalouWebServer() {}

// UnsafeMalouWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalouWebServer will
// result in compilation errors.
type UnsafeMalouWebServer interface {
	mustEmbedUnimplementedMalouWebServer()
}

func RegisterMalouWebServer(s grpc.ServiceRegistrar, srv MalouWebServer) {
	s.RegisterService(&MalouWeb_ServiceDesc, srv)
}

func _MalouWeb_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_CreateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).CreateRunner(ctx, req.(*CreateRunnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_UpdateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).UpdateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_UpdateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).UpdateRunner(ctx, req.(*UpdateRunnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_RunnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).RunnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_RunnerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).RunnerInfo(ctx, req.(*RunnerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_RunnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).RunnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_RunnerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).RunnerList(ctx, req.(*RunnerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).CreatePipeline(ctx, req.(*CreatePipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_UpdatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).UpdatePipeline(ctx, req.(*UpdatePipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_PipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).PipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_PipelineInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).PipelineInfo(ctx, req.(*PipelineInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_PipelineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).PipelineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_PipelineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).PipelineList(ctx, req.(*PipelineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MalouWeb_PipelineInstanceLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInstanceLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalouWebServer).PipelineInstanceLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MalouWeb_PipelineInstanceLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalouWebServer).PipelineInstanceLogList(ctx, req.(*PipelineInstanceLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MalouWeb_ServiceDesc is the grpc.ServiceDesc for MalouWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MalouWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MalouWeb",
	HandlerType: (*MalouWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _MalouWeb_CreateRunner_Handler,
		},
		{
			MethodName: "UpdateRunner",
			Handler:    _MalouWeb_UpdateRunner_Handler,
		},
		{
			MethodName: "RunnerInfo",
			Handler:    _MalouWeb_RunnerInfo_Handler,
		},
		{
			MethodName: "RunnerList",
			Handler:    _MalouWeb_RunnerList_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _MalouWeb_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _MalouWeb_UpdatePipeline_Handler,
		},
		{
			MethodName: "PipelineInfo",
			Handler:    _MalouWeb_PipelineInfo_Handler,
		},
		{
			MethodName: "PipelineList",
			Handler:    _MalouWeb_PipelineList_Handler,
		},
		{
			MethodName: "PipelineInstanceLogList",
			Handler:    _MalouWeb_PipelineInstanceLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/malou_web.proto",
}
